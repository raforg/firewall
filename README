README
~~~~~~
firewall - Linux-2.2 ipchains (packet filtering) firewall administration

This contains scripts that manage an ipchains (packet filtering) firewall.
All you have to do is read the policy file and edit it to your requirements.

The policy file is composed of sections in which you need to specify much
information: this host's trusted and untrusted network interfaces; this
host's role and function within the network topology; and the incoming and
outgoing services to allow and the internal and external hosts that may
take part in them. It has been designed so as to make this as painless and
flexible as possible.

Each section contains detailed explanations and advice on things such as
when to start the firewall and the security implications of various well
known internet services and advice on how to allow them safely. It is
intended to introduce administrators to some subtleties of packet
filtering quickly so that they can make better informed security decisions
and achieve and maintain effective network security (at least the packet
filtering part) in a very short time. Of course, it will not prevent you
from achieving bad network security, but you will have been warned :)

Each section also contains commented out variables that can be uncommented
and possibly edited to supply policy information to fwup. Some of them
show the default values used by fwup. Others are choices. Others still are
just examples. Hopefully it's clear which is which. Each policy variable
is explained when encountered.

Various network topologies are supported: standalone host, forwarding
host, simple masquerading host, simple port forwarding/masquerading host,
alias masquerading host (not implemented yet) and static NAT host (not
implemented yet).

Up to 10 untrusted network interfaces are supported, each with a distinct
policy. There can be as much or as little policy sharing between untrusted
interfaces as you like.

The policy is specified in the firewall.policy file.

Read it carefully.

Here is the list of currently supported services:

    icdns   - incoming Client DNS
    ocdns   - outgoing Client DNS
    isdns   - incoming Server DNS
    osdns   - outgoing Server DNS
    ismtp   - incoming SMTP
    osmtp   - outgoing SMTP
    ipop    - incoming POP
    opop    - outgoing POP
    iimap   - incoming IMAP
    oimap   - outgoing IMAP
    ildap   - incoming LDAP
    oldap   - outgoing LDAP
    ispop   - incoming SSL-POP
    ospop   - outgoing SSL-POP
    isimap  - incoming SSL-IMAP
    osimap  - outgoing SSL-IMAP
    isldap  - incoming SSL-LDAP
    osldap  - outgoing SSL-LDAP
    issh1   - incoming SSH1
    ossh1   - outgoing SSH1
    issh2   - incoming SSH2/LSH
    ossh2   - outgoing SSH2/LSH
    inftp   - incoming FTP (normal mode)
    ipftp   - incoming FTP (passive mode)
    onftp   - outgoing FTP (normal mode)
    opftp   - outgoing FTP (passive mode)
    iteln   - incoming TELNET
    oteln   - outgoing TELNET
    ihttp   - incoming HTTP
    ohttp   - outgoing HTTP
    ihttps  - incoming HTTPS
    ohttps  - outgoing HTTPS
    iproxy  - incoming HTTP PROXY
    oproxy  - outgoing HTTP PROXY
    inntp   - incoming NNTP
    onntp   - outgoing NNTP
    irsync  - incoming RSYNC
    orsync  - outgoing RSYNC
    icvs    - incoming CVS
    ocvs    - outgoing CVS
    ignats  - incoming GNATS
    ognats  - outgoing GNATS
    imysql  - incoming MYSQL
    omysql  - outgoing MYSQL
    ismb    - incoming SMB
    osmb    - outgoing SMB
    iirc    - incoming IRC
    oirc    - outgoing IRC
    iicq    - incoming ICQ
    oicq    - outgoing ICQ
    ireal   - incoming RealAudio/QuickTime
    oreal   - outgoing RealAudio/QuickTime
    intp    - incoming NTP
    ontp    - outgoing NTP
    igoph   - incoming GOPHER
    ogoph   - outgoing GOPHER
    iwais   - incoming WAIS
    owais   - outgoing WAIS
    oarch   - outgoing ARCHIE
    ifing   - incoming FINGER
    ofing   - outgoing FINGER
    owhois  - outgoing WHOIS
    iauth   - incoming AUTH
    oauth   - outgoing AUTH
    inotes  - incoming NOTES
    onotes  - outgoing NOTES
    ilog    - incoming SYSLOG
    olog    - outgoing SYSLOG
    sdhcp   - DHCP Server
    cdhcp   - DHCP Client
    isnmp   - incoming SNMP
    osnmp   - outgoing SNMP
    isnmpt  - incoming SNMP TRAP
    osnmpt  - outgoing SNMP TRAP
    ibgp    - incoming BGP
    obgp    - outgoing BGP
    ospf    - OSPF
    irip    - incoming RIP
    orip    - outgoing RIP
    ikerb   - incoming KERBEROS
    okerb   - outgoing KERBEROS
    ipptp   - incoming PPTP
    opptp   - outgoing PPTP
    iipsec  - incoming IPSEC
    oipsec  - outgoing IPSEC
    iping   - incoming PING
    oping   - outgoing PING
    itrace  - incoming TRACEROUTE
    otrace  - outgoing TRACEROUTE

Note: Don't trust it. Test it. Many services haven't been tested yet.

Please send me any success reports, bug reports, criticism, comments,
suggestions, patches, pointers to more information, ...

INSTALL
~~~~~~~
The Makefile was written for a Redhat 6.0 Linux 2.2 system. It assumes a
Redhat 6.0 /etc/rc.d layout (so you might have to edit the Makefile or install
manually). See REQUIREMENTS for run-time requirements.

Install (as root):

    tar xzf firewall-20000421.tar.gz
    cd firewall-20000421
    make install

Edit the sample policy file to reflect your filtering policy and install it:

    vi firewall.policy
    make policy

Start/test the firewall (before untrusted interfaces are brought up):

    /etc/rc.d/init.d/firewall start

For more details:

    make help

After setting up a firewall, don't forget to run port scanners (e.g. nmap) on
your untrusted interfaces (as root from the inside and the outside) to make
sure that you got what you wanted. If there are any surprises, investigate.

If your untrusted interface(s) change IP address, reload the firewall in a
script that executes as soon as each new IP address is established (e.g.
/etc/ppp/ip-up.local or /etc/dhcp/*).

REQUIREMENTS
~~~~~~~~~~~~
- Linux-2.2.x and ipchains
- perl used by fwup and the utilities (dns2ip also requires Net-DNS-0.12)
- ipmasqadm iff doing port forwarding
- ip (iproute2) iff doing alias masquerading or static NAT (not implemented yet)
- nmap used by the portscan utility
- root privileges for ipchains, ipmasqadm, ip and nmap

COPYING
~~~~~~~
firewall - Linux-2.2 ipchains (packet filtering) firewall administration
Copyright (C) 1999, 2000 raf <raf2@zip.com.au>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
    or visit http://www.gnu.org/copyleft/gpl.html

HISTORY
~~~~~~~
19991231

    - Initial version

20000309

    - Incorporated linux-firewall-tools.com:
      - Added more protection against spoofing and dangerous services
      - Added more kernel protection (source routing, redirects, syn cookie,
        defrag, icmp broadcast echo, bogus error response, martian logging)
      - Added services (DHCP, HTTPS, HTTP PROXY, IMAP, ICQ, Real Audio)
      - Changed default forward policy from deny to reject
      - Added "untrusted networks"
      - Added configuration of masquerade timeouts
    - Split SSH into SSH1 and SSH2
    - Added BGP and RSYNC
    - Fixed DNS policy variables and doco
    - Cleaned up, fixed bugs
    - Modified fwup to run on non redhat systems
    - Added "make decent"
    - Started logging incoming ping and traceroute even if accepted
    - IP forwarding only started/stopped if masquerading requested
    - Started denying/rejecting fragments (kernel must always defrag)
    - Started using local and masqueraded port ranges (from Mike A. Harris)
    - Added SMB, PPTP and IPSEC (from Yan Seiner)
    - Added support for multiple untrusted interfaces with differing policies
    - Added automatic identification of local networks

20000321

    - Added dynamic IP address hacking in IP MASQ (for non-routers only!)
    - Added the ability to deny/reject selected ports without logging them
    - Added Kerberos, CVS, GNATS, MySql, SSL-POP, SSL-IMAP, SSL-LDAP, OSPF
    - Fixed bug: was masquerading traffic between multiple internal networks
    - Added the dns2ip utility to translate domain names in policy files into ip addresses

20000402

    - Shortened/cleaned up fwup a bit with more functions
    - Fixed bug: SSH1 rules were allowing SSH2 as well
    - Fixed doco: outgoing SSH2 note was stupid
    - Fixed bug: SDNS rules were allowing CDNS as well
    - Fixed bug: masqueraded UDP (e.g. CDNS!) failed (func vars weren't local)
    - Fixed bug: SNMP[T] rules from Chapman & Zwicky disagreed with RFC 1157
    - Fixed bug: typo in DHCP Client rules allowed incoming address updates even when $DHCP_SERVERS is empty
    - Added the ability to specify more simple tcp services in the policy file

20000421

    - Added LDAP, NOTES
    - Added the ability to deny/reject other protocols without logging them
    - Added loading/unloading of IP masquerading modules
    - Deny/Reject fragments iff $IPV4_FRAGMENT_PROTECT != "no"
    - Made ICMP configurable (default behaviour remains the same)
    - Added portsummary utility to display connection tuples in tcpdump output
    - Included some archie server addresses in firewall.policy as a comment
    - Started determining masquerade ports directly from kernel source
    - Added support for forwarding to internal hosts with individual policies
    - Fixed bug: Stopped creating chains that were never used (thanks to
      forwarding changes, starting the firewall is now twice as fast!)
    - Fixed bug: Outgoing ICQ rules were wrong (udp rules reversed)
    - Fixed bug: The extra tcp services weren't being included
    - Fixed bug: Was doing spoof protection on internal untrusted interfaces
    - Rewrote/reorganised the initial doco in firewall.policy and README
    - Added detailed open port profiles to the notes on each service
    - Added support for port forwarding (incoming and outgoing M:1 NAPT)
    - Added portscan utility to perform comprehensive portscans
    - Added an example policy file for each type of supported network tpology
    - Made chain policies configurable (some like DENY, others like REJECT)

REFERENCES
~~~~~~~~~~
Building Internet Firewalls by Chapman & Zwicky
IPCHAINS-HOWTO by Paul Russell
http://linux-firewall-tools.com by Robert L. Ziegler
The ipchains mailing list. Particularly Yan Seiner and Mike A. Harris
IP-Masquerade-HOWTO by David Ranch
IP Command Reference by Alexey N. Kuznetsov
Various RFCs

BUGS
~~~~
- The *SERVERS* and *CLIENTS* policy variables for a given service apply to all
  instances of a service across a given interface. This means that if you have
  something like: SERVICES="oservice.targeta oservice.targetb", then the hosts
  in both targeta and targetb are restricted to connecting to the same set of
  external servers for the given service. Let me know if this is a problem.

- Masquerading across multiple interfaces is not supported. This is probably
  a feature since doing so seems very strange. Let me know if this is a problem.

- There is no support for alias masquerading or static NAT yet (next release).

- Perl should not be used in fwup. It's too dangerous to have on a bastion host.

- When port forwarding, internal hosts shouldn't try to make connections to
  the forwarded port on the external interface. If the port forwarding host
  tries, the connection will be made to the same host (i.e. the port is not
  forwarded - because it arrives on the loopback interface). If an internal
  host tries, the packets get completely lost (probably because it leaves
  the network on the default route, across the external interface, in the
  wrong direction, never to be seen again). If anyone knows a solution to
  this, I'd like to hear about it. In the meantime, the port forwarding
  host and other internal hosts must connect directly to internal ports.

- Stopping the firewall stops packet forwarding in general. This is intentional.
  However, on Redhat systems with IPV4_FORWARD="yes" in /etc/sysconfig/network,
  packet forwarding isn't stopped when the firewall is stopped. This is a
  convenience (but it is unsafe).

- There is no support for using ipchains' REDIRECT target.

TODO
~~~~
More testing
Add support for alias masquerading and static NAT (next release)
Add services: vpn, cuseeme, vdolive, quake, unreal tournament, ...
Improve fwhelper
Port to netfilter when linux-2.4 is ready

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
URL: http://www.zip.com.au/~raf2/lib/software/firewall
Date: 20000421
Author: raf <raf2@zip.com.au>

