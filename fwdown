#!/bin/sh
#
# firewall - http://fwup.org/
#
# Copyright (C) 1999-2001 raf <raf@raf.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# or visit http://www.gnu.org/copyleft/gpl.html
#

# fwdown - Brings down an ipchains packet filtering firewall
#
# Run this after all network interfaces are down
# (i.e. after /etc/rc.d/rc?.d/K??network stop)
#
# 20010507 raf <raf@raf.org>

##############################################################################
# Usage: [policy=filename] fwdown
#
# The policy variable determines the policy file to implement.
# It is /etc/firewall.policy by default.
#

##############################################################################
# Start by checking that we've got everything we need
#

# Set the path explicitly

PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/sbin

# Define a version of redhat's action function that copes with functions

RES_COL=60
[ -z "$COLUMNS" ] && COLUMNS=80
MOVE_TO_COL="echo -en \\033[300C\\033[$[${COLUMNS}-${RES_COL}]D"
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"

log()
{
	[ -z "$PROG_NAME" ] && PROG_NAME="`basename $0`"
	logger -t "$PROG_NAME" -p daemon.notice $*
}

die()
{
	log -s $*
	exit 1
}

success()
{
	local msg="$1"
	log $msg succeeded
	echo -n $msg
	$MOVE_TO_COL
	echo -n "[  "
	$SETCOLOR_SUCCESS
	echo -n "OK"
	$SETCOLOR_NORMAL
	echo "  ]"
	return 0
}

failure()
{
	local msg="$1"
	log $msg failed
	echo -n $msg
	$MOVE_TO_COL
	echo -n "["
	$SETCOLOR_FAILURE
	echo -n "FAILED"
	$SETCOLOR_NORMAL
	echo "]"
	return 1
}

action()
{
	local msg="$1"; shift
	$* && success "$msg" || failure "$msg"
}

not()
{
	"$@" && return 1 || return 0
}

yes()
{
	case "$1" in
		[Yy]es|[Tt]rue|[Oo]n|1)
			return 0
			;;
		*)
			return 1
			;;
	esac
}

no()
{
	case "$1" in
		[Nn]o|[Ff]alse|[Oo]ff|0)
			return 0
			;;
		*)
			return 1
			;;
	esac
}

locate()
{
	for dir in `echo $PATH | sed 's/:/ /g'`
	do
		[ -x "$dir/$1" ] && echo "$dir/$1" && break
	done
}

# Source the network configuration (if redhat)

[ -r /etc/sysconfig/network ] && . /etc/sysconfig/network

# Check that networking is required (if redhat)

[ "$NETWORKING" = "no" ] && exit 0

# Check that ipchains is available

ipchains_cmd="`locate ipchains`"
[ -z "$ipchains_cmd" ] && die "failed to find executable ipchains"

# Check that ifconfig is available

ifconfig_cmd="`locate ifconfig`"
[ -z "$ifconfig_cmd" ] && die "failed to find executable ifconfig"

# Check that the policy file is available

[ -z "$policy" ] && policy=/etc/firewall.policy

[ ! -r $policy ] && die "failed to find readable $policy"

##############################################################################
# Load the IP packet filtering policy and check it
#

# Source the policy file

. $policy

# Check that $TRUSTED_INTERFACES is defined (at least lo)

[ -z "$TRUSTED_INTERFACES" ] && die "\$TRUSTED_INTERFACES must be defined in $policy (e.g. TRUSTED_INTERFACES=\"eth0 lo\")"

# If $INTERNAL_NETWORKS isn't defined, derive it from $TRUSTED_INTERFACES

[ -z "$INTERNAL_NETWORKS" ] && INTERNAL_NETWORKS="`"$ifconfig_cmd" | awk '

	# Print the addresses and network masks of the internal interfaces (not lo)

	BEGIN {

		# Receive input one interface at a time, not one line at a time
		RS="";

		# Build a dictionary of internal interfaces to look for (exclude lo)
		split(substr(ARGV[1], index(ARGV[1], "=") + 1), ifaces, " +");
		for (i in ifaces)
			if (ifaces[i] != "lo")
				internal[ifaces[i]] = 1;
	}

	{
		# All records but the first have $1 == "\0" for some reason
		iface = ($1 != "\0") ? $1 : $2;

		# Identify the real device for aliases
		if ((colon = index(iface, ":")) != 0)
			iface = substr(iface, 0, colon - 1);

		# Skip interfaces that we are not interested in
		if (internal[iface] == "")
			next;

		# Print the network pattern of this interface for ipchains
		if (match($0, /inet addr:[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/) == 0)
			next;

		addr = substr($0, RSTART + 10, RLENGTH - 10);

		if (match($0, /Mask:[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/) == 0)
			next;

		mask = substr($0, RSTART + 5, RLENGTH - 5);

		print addr "/" mask;
	}

' list="$TRUSTED_INTERFACES"`"

# Check that ip is available if static NAT

if yes "$STATIC_NAT"
then
	ip_cmd="`locate ip`"
	[ -z "$ip_cmd" ] && die "failed to find executable ip (required for static NAT)"
fi

# Check that ip is available if alias port porwarding

if yes "$ALIAS_PORT_FORWARDING"
then
	ip_cmd="`locate ip`"
	[ -z "$ip_cmd" ] && die "failed to find executable ip (required for alias port porwarding)"
	PORT_FORWARDING="yes"
fi

# Check that ipmasqadm is available if port forwarding or alias port porwarding

if yes "$PORT_FORWARDING"
then
	ipmasqadm_cmd="`locate ipmasqadm`"
	[ -z "$ipmasqadm_cmd" ] && die "failed to find executable ipmasqadm (required for port forwarding)"
fi

##############################################################################
# Debugging
#

dbg()
{
	[ -n "$fwdebug" ] && [ "$fwdebug" -gt 0 ]
}

ipchains()
{
	dbg && echo ipchains $* >&2
	"$ipchains_cmd" $*
}

ipmasqadm()
{
	dbg && echo ipmasqadm $* >&2
	"$ipmasqadm_cmd" $*
}

ip()
{
	dbg && echo ip $* >&2
	"$ip_cmd" $*
}

##############################################################################
# Stop IP Packet Forwarding
#

ipv4=/proc/sys/net/ipv4

# Do we need to stop forwarding?

stop_forwarding="0"
yes "$FORWARDING" && stop_forwarding="1"
yes "$MASQUERADING" && stop_forwarding="1"
yes "$STATIC_NAT" && stop_forwarding="1"

# Don't override /etc/sysconfig/network (if redhat)

yes "$FORWARD_IPV4" && stop_forwarding="0"

if [ "$stop_forwarding" = "1" ]
then
	do_stop_forwarding()
	{
		[ -w $ipv4/ip_forward ] && echo 0 > $ipv4/ip_forward
	}

	action "Stopping IP Packet Forwarding" do_stop_forwarding
fi

##############################################################################
# Stop IP Packet Filter
#

do_stop_filter()
{
	# Stop Packet Filter

	ipchains -F
	ipchains -X
	ipchains -P input ACCEPT
	ipchains -P output ACCEPT
	ipchains -P forward ACCEPT

	# Stop Port Forwarding

	yes "$PORT_FORWARDING" && ipmasqadm portfw -f

	# Stop Alias Port Forwarding

	if yes "$ALIAS_PORT_FORWARDING"
	then
		set $ALIAS_PORTFW
		local fwmark=0
		while [ $# != 0 ]
		do
			fwmark="`expr $fwmark + 1`"
			local proto=$1 dstaddr=$2 dstport=$3 toaddr=$4 toport=$5 pref=$6
			shift; shift; shift; shift; shift; shift

			if [ -z "$proto" -o -z "$dstaddr" -o -z "$dstport" -o -z "$toaddr" -o -z "$toport" -o -z "$pref" ]
			then
				log -s "Invalid Alias Port Forwarding instruction: protocol=\"$proto\" dstaddr=\"$dstaddr\" dstport=\"$dstport\" toaddr=\"$toaddr\" toport=\"$toport\" preference=\"$pref\""
				break
			fi
			ip rule delete from $toaddr fwmark $fwmark nat $dstaddr
		done
	fi

	# Stop Static NAT

	if yes "$STATIC_NAT"
	then
		set $NAT
		while [ $# != 0 ]
		do
			local dstaddr=$1 toaddr=$2
			shift; shift

			if [ -z "$dstaddr" -o -z "$toaddr" ]
			then
				log -s "Invalid Static NAT instruction: dstaddr=\"$dstaddr\" toaddr=\"$toaddr\""
				break
			fi

			ip route delete nat $dstaddr via $toaddr

			for src in $INTERNAL_NETWORKS
			do
				for dst in $INTERNAL_NETWORKS
				do
					if [ "$src" != "$dst" ]
					then
						ip rule delete from $src to $dst lookup main
					fi
				done
			done

			local base="${dstaddr%/*}" bits="${dstaddr#*/}"
			[ "$base" != "$dstaddr" ] && toaddr="$toaddr/$bits"
			ip rule delete from $toaddr nat $base
		done
		ip route flush cache
	fi
}

action "Stopping IP Packet Filter" do_stop_filter

##############################################################################
# Stop Dynamic IP Address Hacking in IP MASQ
#

if yes "$IPV4_DYNADDR"
then
	do_stop_dynaddr()
	{
		[ -w $ipv4/ip_dynaddr ] && echo 0 > $ipv4/ip_dynaddr
	}

	action "Stopping Dynamic IP Address Hacking in IP MASQ" do_stop_dynaddr
fi

##############################################################################
# Stop IP Martian Logging
#

if not no "$IPV4_LOG_MARTIANS"
then
	do_stop_martian()
	{
		if [ -w $ipv4/conf/all/log_martians ]
		then
			for procfile in $ipv4/conf/*/log_martians
			do
				echo 0 > $procfile
			done
		fi
	}

	action "Stopping IP Martian Logging" do_stop_martian
fi

##############################################################################
# Stop IP Bogus Error Response Protection
#

if not no "$IPV4_BOGUS_ERROR_RESPONSE_PROTECT"
then
	do_stop_bogus()
	{
		[ -w $ipv4/icmp_ignore_bogus_error_responses ] && echo 0 > $ipv4/icmp_ignore_bogus_error_responses
	}

	action "Stopping IP Bogus Error Response Protection" do_stop_bogus
fi

##############################################################################
# Stop IP ICMP Broadcast Echo Protection
#

if not no "$IPV4_ICMP_BROADCAST_ECHO_PROTECT"
then
	do_stop_icmp()
	{
		[ -w $ipv4/icmp_echo_ignore_broadcasts ] && echo 0 > $ipv4/icmp_echo_ignore_broadcasts
	}

	action "Stopping IP ICMP Broadcast Echo Protection" do_stop_icmp
fi

##############################################################################
# Stop IP Fragment Protection
#

if not no "$IPV4_FRAGMENT_PROTECT"
then
	do_stop_fragment()
	{
		[ -w $ipv4/ip_always_defrag ] && echo 0 > $ipv4/ip_always_defrag
	}

	action "Stopping IP Fragment Protection" do_stop_fragment
fi

##############################################################################
# Stop IP TCP SYN Cookie Protection
#

if not no "$IPV4_TCP_SYN_COOKIE_PROTECT"
then
	do_stop_syncookie()
	{
		[ -w $ipv4/tcp_syncookies ] && echo 0 > $ipv4/tcp_syncookies
	}

	action "Stopping IP TCP SYN Cookie Protection" do_stop_syncookie
fi

##############################################################################
# Stop IP ICMP Redirect Protection
#

if not no "$IPV4_ICMP_REDIRECT_PROTECT"
then
	do_stop_redirect()
	{
		if [ -w $ipv4/conf/all/accept_redirects ]
		then
			for procfile in $ipv4/conf/*/accept_redirects
			do
				echo 1 > $procfile
			done
		fi
	}

	action "Stopping IP ICMP Redirect Protection" do_stop_redirect
fi

##############################################################################
# Stop IP Source Routing Protection
#

if not no "$IPV4_SOURCE_ROUTE_PROTECT"
then
	do_stop_sourceroute()
	{
		if [ -w $ipv4/conf/all/accept_source_route ]
		then
			for procfile in $ipv4/conf/*/accept_source_route
			do
				echo 1 > $procfile
			done
		fi
	}

	action "Stopping IP Source Routing Protection" do_stop_sourceroute
fi

##############################################################################
# Stop IP Source Address Verification
#

if not no "$IPV4_SPOOF_PROTECT"
then
	do_stop_spoof()
	{
		if [ -w $ipv4/conf/all/rp_filter ]
		then
			for procfile in $ipv4/conf/*/rp_filter
			do
				echo 0 > $procfile
			done
		fi
	}

	action "Stopping IP Source Address Verification" do_stop_spoof
fi

##############################################################################
# Stop IP Destination Loose UDP Masquerading
#

if yes "$IPV4_MASQ_UDP_DEST_LOOSE"
then
	do_stop_dloose()
	{
		[ -w $ipv4/ip_masq_udp_dloose ] && echo 0 > $ipv4/ip_masq_udp_dloose
	}

	action "Stopping IP Destination Loose UDP Masquerading" do_stop_dloose
fi

##############################################################################
# Unload IP Masquerading Modules
#

if yes "$MASQUERADING"
then
	if [ -r /proc/modules -a -n "$MASQ_MODULES" ]
	then
		do_unload_modules()
		{
			local loaded="0" unloaded="0" module

			for module in $MASQ_MODULES
			do
				if grep ip_masq_$module /proc/modules >/dev/null
				then
					loaded="`expr $loaded + 1`"
					rmmod ip_masq_$module && unloaded="`expr $unloaded + 1`"
				fi
			done

			[ "$loaded" = "$unloaded" ]
		}

		action "Unloading IP Masquerading Modules" do_unload_modules
	fi
fi

exit 0

# vi:set ts=4 sw=4:
